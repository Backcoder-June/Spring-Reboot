1. static contents web 개발

resource - static package - file.html  만들고

=> localhost:8080/file.html


2. API 방식 web 개발 (Model, html, template 안씀)

@Controller 필요
@ResponseBody  **필수

@GetMapping("Url")
public String helloAPI(@RequestParam("promise") String whatever{
return "juststringman" + whatever;}

** Json 방식 {"jasonsaidthat":"thisishowhetalks."}
- 똑같은데 그냥 return 이 String 이 아니라 c1 같은 객체로 받는것.
먼저 사용할 static class 를 하나 만들고
그 class datatype 으로 취하는 method 를 만들면서 api랑 똑같이 하면됨.
(c1 객체화 하고 return c1; 이 되게끔.)


3. MVC web - Template Engine 활용
 Controller  - Model   -  Template(View)
@Controller
@GetMapping("URL") => 이 method 를 호출, 실행한다.
public String welcome(Model model){        //기본 data type - String
model.addAttribute("key" , "value");       //"key" 는 html 의 $ 와 연결 되있는 값
 return "file이름만(.html)";
 }
localhost:8080/url

* @RequestParam 사용법  @RequestParam(value="promise", required=true)
public String welcome (@RequestParam("Url-promise") String whatever, Model model){
model.addAttribute("html-key" , whatever);
localhost:8080/url?promise=whatever


4. 예제 - 회원 등록, 조회 web 개발
순서
(1) domain 생성 - 다 가져다쓸 class, Name, Id
(2) interface repository 생성  - save, findbyid, findbyname, findall 만들 기본 기술들
(3) 구현체 repository 생성 - 위에거만 구현
(4) service 생성 - 기본 기술들 활용해서 service 로 사용할 큼지막한 기술 join, findmembers구현
(5) Controller - 화면 구현 View 하고 연결 (Template)
                 service의 기술들 join, findmembers 을 화면별로 적용(url 이용)
(6) @Component(@Service,Repository) / Config @Bean  둘중 하나 사용해서 Spring container 연결(DI)

-- 까지가 java 내에서 서비스 구현이 된거고 (memory 로는 실행 가능)
(7) 이걸 DB 에 넣으려면 구현 repository 를 Query 언어로
    JDBC Template / JPA / Spring data JPA 등으로 바꿔줘야 한다.
(8) Config 에서 repository return new 값 바꿔치기
 완료


5. JPA repository 로 바꿔치기   ( JPA repository 는 EntityManager 로 모든게 동작한다 )
** 기본세팅 : Jpa Library 추가하기 / properties 에 JPA 관련 특성추가하기
(1) domain class 에  @Entity(javax)  Mapping 하기
(2) domain 데이터 "id" 에 @Id(javax) / @GeneratedValue(javax)(stratge = GenerationType.IDENTITY) 추가하기
(3) Service 계층에 @Transactional(org!!) 추가하기
                                                - 여기까지는 springdata JPA 도 동일하다
(4) JPA repository class 에 private final EntityManager em; 생성자; EntityManager(em) 소환하기 -> overriding(interface)
(5) config 에서 바꿔치기 (EntityManager 소환필요)
    private EntityManager em; @Autowired 생성자;
    return new JPAmemberrepository(em);
완료


6. Spring data JPA repository 로 바꿔치기
** JPA 설정과 같은 세팅 (@Entity @Id @GeneratedValue @Transactional(org) )
(1) interface 로 repository 생성
(2) extends JpaRepository<Member, Long>(Spring data 제공), interfacerepository (다중 상속)
(3) overriding - save, findByName, findById, findAll ( 전부 interfacerepository 거 가져오기만 하면 끝)
(4) config 연결 - EntityManager 같은거 다 필요없고, Service 랑 interfacerepository 만 연결시켜주면 됨
               - Springdata Jpa memberrepository 는 Jpa Repository extends 할 때, 자동으로 Bean 으로 등록됨.
   private final interfacereposit interface; @Autowired 생성자;
   @Bean Memberservice membs(){return new Memberservice(interfacerepository);}
 끝


7. AOP class 만들기 ( cross-cutting concern / core concern )
(1) AOP package 만들고 원하는 공통관심사항 class 생성
(2) class 에 @Aspect  <- AoP class 임을 알려줌
(3) @Component <- Bean 으로 등록 ( Config 에서 직접해도 되지만 한가지 작업을 더해줘야한다 )
(4) method 만들고
(5) method 에 @Around("execution( * 상위패키지.원하는패키지.*(.원하는클래스.))")  로 적용할 대상 선택지정
 끝

Controller -> [[AOP class -> Proxy 복제 service/repository -> AOP 결과물]] -> 진짜 service/repository  진행


8. test case 만들기
*같은 package 이름, 같은 class명+test => 계층에 가서 Ctrl + Shift + T
(1) testclass 안에서 실험하고싶은 계층 (Service, repository 등) 소환
    Memberrepository A = new Memberrepository();

(1.5) Service 계층 소환 할때는, repository 를 달고 들어와야하기 때문에, DI 로 해줘야 한다.
      Memberservice memberservice;
      Memberrepository memberrepository;   선언만 해주고

   ** @BeforeEach
      public void beforeeach(){
              memberrepository = new Memberrepository();
              memberservice = new Memberservice(memberrepository);  이렇게 담아야 담긴다.


(2) 도메인 class 객체 생성 -> 이걸로 실험을 해야함
    member.setname("june");
(3) 소환한 계층의 method 들 사용해보기
    @Test
    public void save{
    A.save(member);      }=> 작동시 초록불
(4) 확실한 test 를 짜보기 (Boolean / Assertthat) - //given  //when //then
    assertthat(x).isEqualto(y);        => 작동시 같다는 의미.

(5) clearman 만들기 - 실험하는 해당 계층 class 에
    public void clearmain() { store.clear();} -> AfterEach 와 연계
    Test class 에
    @AfterEach
    public void aftech(){ A.clearman();}

(6) Exception 넣어둔 부분 test
  [1] try catch
  [2] assertThrows        Exception종류.class   , 람다 (어떤로직) ->  m2가 조인하는 logic => 해당 Exception 이 터져요
        assertThrows(IllegalStateException.class, () -> memberservice.Join(m2));


9. Spring Integration Test -  스프링 컨테이너랑 함께 통합 test -> DB 까지 실제로 올라감
(1) @SpringBootTest  -> SpringBoot 랑 같이 통합 test 할게요!
(2) @Transactional   -> Test가 끝나면 DB date 롤백(초기화)              => @AfterEach(X)
(3) Service/Repository 소환할 때, 닥 @Autowired 로 제낌 (DI new 안씀)   => @BeforeEach(X)
     @Autowired Memberservice memberservice;
     @Autowired interfacerepository memberrepository; ( 주의*interface - 구현체 )
(4) 나머지는 그냥 test case 랑 똑같음















777. method 잡기술

(1).length()  -  글자수 및 기본 array 숫자
(2).size()  -  ArrayList 등 Collection Framework 에서 element 숫자

(3).replace(A, B)  -  다 완성된 문장따위에서 교환

(4).equals()  -  String 비교  /  객체 비교

(5)Integer.toString() - Int to String Casting
   Integer.parseInt() - String to Int Casting

(6)args[0];  -  configuration - 인자값 순서대로 ( 띄어쓰기로만 구별 ) / main(Stirng[] args) /

(7) int x = 1 ;
     switch(x){
case 1 :    ;break;
case 2 :    ;break;
default : sout("목록에 없습니다"); }

(8) if(  ( A||B||C )  &&  D  )    - ABC 부분 () 로 묶어줘야 함

(9) for(){if(){continue;}            <- 그 부분만 띄어넘고 계속 진행해
          sout();
          if(){break;}  }

(10) Array
     String[] members = new members[3];
     members[0] = "Jack";

(11) foreach
for( String 새로운변수 : 돌릴배열집합 ) {sout(새로운변수)}       //돌릴배열집합을 새로운변수 에 하나하나 담아주고, 그때마다 작동

(12) output += a;    =>  output = output + a ;

(13) Scanner parrot = new Scanner(Systme.in);
     while(parrot.hasNextLine){sout(parrot.nextLine +"라구요?");} parrot.close();

(14) File fi = new File("out.txt");
     Scanner parrot = new Sacnner(fi);

(15) static -> method, variables -> class member

     public/private/default/protected -> method, variables

     => public static void sum(){}

     class -> public / default  (패키지공유)
     => public class calculator{}

(16) Overloading - parameter 개수 / data type 에 따라 자동호출 시스템

(17) Overriding - [1] super class 에 생성자 안만들고 sub class 에서 만들기
                  [2] 이미 만들었다면 sub 에서 생성자 parameter 까지만 맞추고 super(a,b); 해주면 끝

(18) super
     (int a, int b) {super(a, b);}    - 생성자 상속 땡겨오기
     return super.sum();   -   메소드 상속,overriding 할때 그대로 땡겨오기

(19) abstract -> class/method       ->  상속 필수 / overriding 필수

(20) final -> class/method/field     ->  상속 불가 / overriding 불가 / 변경불가

(21) interface class
     class A implements interface1, interface2 { }    -   다중 구현 가능
     interface1 extends interface2 {  }  -   껍데기 상속 가능
     무조건 public method/변수. - 껍데기는 public 으로! (생략해도 java 가 public 으로 만듬)
     interface 껍데기 - public () {}       //  abstract 껍데기  abstract ();

(22) 다형성 - 하나의 메소드/class 가 다양한 방법으로 동작
     [1] Overloading 메소드 - 자동호출시스템
     [2] interfacereposit IR = new Memberreposit();        =>1.필요한것만 꺼내쓰기 2.다른 method 사용 방지 3.Super 로 묶기
          < 행세 CLASS >            < 원본 CLASS >
              1. 본래 자신인 Memberrepsoit 이 당연히 오거나
              2. 자신의 Super class 가 온다    =>  Super class 처럼 행세 한다.
                 ! Super class 에 있는 method 들 사용 가능 (당연하다. 상속관계)
                 ! Sub 에서 Overriding 된 경우 -> Overriding 된걸 쓴다.
                 ! Sub class 에만 있는 method -> 사용 불가능 (이게 특이점. 행세)
               => ( 있는건 Sub 없는건 Super )


(22) Exception
     IllegalArgumentException   -  인자값이 메소드에 적합하지 않음
     IllegalStateException      -  메소드가 동작할 수 있는 상황을 충족시키지 못함
     NullPointerException       -  parameter 가 없음 Null
     ArrayIndexOutOfBoundsException
     ArithmeticException
     FileNotFoundException

(23) try{} catch(Exception e){e.getMessage/toString/printStackTrace();}
                                 간단        자세히      자세히+위치
     catch(ArrayIndexOutOfBoundsException e){}
     catch(ArithmeticException e){}
     catch(Exception e){sout("알수없는 오류");}          <= else 역할
     finally{ sout("disconnect DB") }

(24) finally (무조건실행)  => try catch 마지막에 사용 - DB 연결 끊어주기

(25) throws 예외던지기
     public void SUM() throws FileNotFoundException, IOException{ }

(26) throw 예외 생성 (명령문) new
     public void SUM(int a, int b){
     if(b==0){throw new IllegalArgumentException("분모가 0일 수 없어요.");} a+b;}
     try{c1.SUM();}
     catch(IllegalArgumentException e){sout(e.getMessage());}   -> "분모가 0일 수 없어요."

(27) checked Exception  /  Unchecked Exception
        예외처리 필수            안해도 됨
            X               RuntimeException
    throws / try catch             X
     IO / FileNotFound    Arithmetic / ArrayIndex


(28) .toString     -> 객체를 문자로 표현 ( package 위치, class 이름, 고유번호 )
     public String toString(){                    <- overriding 해서 사용 가능
     return super.toString(); sout("라는 객체");}

(29) .clone    -> protected Object clone() throws CloneNotSupportedException{} 기본이 protected
    overriding -> public Object clone() throws " "{return super.clone();}  ->  접근제어자 바꿔서 쓰자 (Object - 다른 패키지)
    class student implements Cloneable{
    try{
    student s2 = (student) s1.clone();
    sout(s1.name);  sout(s2.name);}
    catch(){}

(30) enum  (class)
     enum Fruit {Apple, Banana, Carrot}

     Fruit A = Fruit.Apple;                 //switch 문 원래 객체 안들어가는데 enum 은 들어감
     switch(A){
     case Apple : sout(""); break;
     case Banana : sout(""); break; }

     if( A == Fruit.Apple ) {sout}
     else if( A == Fruit.Banana ) {sout}

(31) enum + method
     enum Fruit {Apple(1), Banana(2), Carrot(3) ;
[1] ()줄거   -> private rank;
[2] 꺼낼거   -> public getrank(){return this.rank;}
[3] 생성자   -> Fruit(int rank){this.rank = rank;}     }
     Fruit type = Fruit.Apple;
     switch(type){
     case Apple : sout("Apple is ranked" + Fruit.Apple.uprank()); }

[+] foreach ( Fruit F : Fruit.values() ) { sout() }        <- .values() 로 enum 객체에 담아서 뽑기


(32) Reference DataType (new)
       a.ID = 1                  직접 값 때려박기      최신정보공유
     A a = new A(1); A b = a; /      b.ID = 2;      =>참조(o)         a.ID => 2
     A a = new A(1); A b = a; /  b = new A(2);      =>참조(x)         a.ID => 1
       a.ID = 1                  새로운 instance      각자정보

(33)  <Generic> -> class 내부에서 사용할 data type 을 나중에 instance 를 생성할 때, 확정 하는 것
      [1] instance 별로 필요한 data type 으로 바꾸어 class 를 사용할 수 있게 함으로서 코드 중복 방지
      [2] Type safety - 용도와 맞지않는 data type 이 들어가지 않도록 안전보장
      [3] generic 은 reference 참조형 date type 만 가능 (기본형 X) -> wrapper class 이용(.IntValue())

class Language { String lang; 생성자 }               // generic 에 넣을 객체
class engineer<T, S> { public T language; public S age; 생성자 }
public class { main {
Language L1 = new Language("java");
Integer age1 = new Integer(30);
engineer<Language, Integer> en1 = new engineer(L1, age1);
sout(en1.L1.lang);
sout(en1.age1.IntValue());

(34) <Generic> method
     public <T> void getresult( T result ) {};
     en1.<Language> getresult( L1 );

(35) <Generic> extends   -   super class 의 자식들로만 datatype 제한
     class person<T extends superinfo>{ }   -  (generic 은 interface 여도 extends 로 한다)

















999. Acronym

GUI - Graphic User Interface
CLI - Command Line Interface

JPA - Java Persistence Api
JPQL - Java Persistence Query Language

JDBC - Java DB Connectivity

SQL - Structured Query Language

DDL - Data Definition Language
DML - Data Manipulation Language
DCL - Data Control Language

ORM - Object Relational Mapping
RDB - Realtional DB

CRUD - Create Read Update Delete

RDMS - Raw Data Management System

DI - Dependency Injection

AOP - Aspect Oriented Programming

IOC - Inversion OF Control

WAS - Web Application Server

TDD - Test Driven Development

AJAX - Asynchronous Javascript And Xml

JSP - Jacarta Server Pages

JSTL - Jsp Standard Tag Library

POJO - Plain Old Java Object

HTTP - Hyper Text Transfer Protocol

PHP - Hypertext PreProcessor

AWS - Amazon Web Services